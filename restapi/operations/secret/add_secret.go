// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddSecretHandlerFunc turns a function with the right signature into a add secret handler
type AddSecretHandlerFunc func(AddSecretParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddSecretHandlerFunc) Handle(params AddSecretParams) middleware.Responder {
	return fn(params)
}

// AddSecretHandler interface for that can handle valid add secret params
type AddSecretHandler interface {
	Handle(AddSecretParams) middleware.Responder
}

// NewAddSecret creates a new http.Handler for the add secret operation
func NewAddSecret(ctx *middleware.Context, handler AddSecretHandler) *AddSecret {
	return &AddSecret{Context: ctx, Handler: handler}
}

/*AddSecret swagger:route POST /secret secret addSecret

Add a new secret

*/
type AddSecret struct {
	Context *middleware.Context
	Handler AddSecretHandler
}

func (o *AddSecret) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddSecretParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
