// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewAddSecretParams creates a new AddSecretParams object
// no default values defined in spec.
func NewAddSecretParams() AddSecretParams {

	return AddSecretParams{}
}

// AddSecretParams contains all the bound params for the add secret operation
// typically these are obtained from a http.Request
//
// swagger:parameters addSecret
type AddSecretParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The secret won't be available after the given time. The value is provided in minutes. 0 means never expires
	  Required: true
	  In: formData
	*/
	ExpireAfter int32
	/*The secret won't be available after the given number of views. It must be greater than 0.
	  Required: true
	  In: formData
	*/
	ExpireAfterViews int32
	/*This text will be saved as a secret
	  Required: true
	  In: formData
	*/
	Secret string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewAddSecretParams() beforehand.
func (o *AddSecretParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdExpireAfter, fdhkExpireAfter, _ := fds.GetOK("expireAfter")
	if err := o.bindExpireAfter(fdExpireAfter, fdhkExpireAfter, route.Formats); err != nil {
		res = append(res, err)
	}

	fdExpireAfterViews, fdhkExpireAfterViews, _ := fds.GetOK("expireAfterViews")
	if err := o.bindExpireAfterViews(fdExpireAfterViews, fdhkExpireAfterViews, route.Formats); err != nil {
		res = append(res, err)
	}

	fdSecret, fdhkSecret, _ := fds.GetOK("secret")
	if err := o.bindSecret(fdSecret, fdhkSecret, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindExpireAfter binds and validates parameter ExpireAfter from formData.
func (o *AddSecretParams) bindExpireAfter(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("expireAfter", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("expireAfter", "formData", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("expireAfter", "formData", "int32", raw)
	}
	o.ExpireAfter = value

	return nil
}

// bindExpireAfterViews binds and validates parameter ExpireAfterViews from formData.
func (o *AddSecretParams) bindExpireAfterViews(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("expireAfterViews", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("expireAfterViews", "formData", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("expireAfterViews", "formData", "int32", raw)
	}
	o.ExpireAfterViews = value

	return nil
}

// bindSecret binds and validates parameter Secret from formData.
func (o *AddSecretParams) bindSecret(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("secret", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("secret", "formData", raw); err != nil {
		return err
	}

	o.Secret = raw

	return nil
}
